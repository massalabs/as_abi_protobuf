{
  "name": "test_abi",
  "version": "1.0.0",
  "main": "index.js",
  "devDependencies": {
    "@massalabs/as-transformer": "^0.1.2",
    "@types/node": "^20.3.2",
    "as-proto": "^1.3.0",
    "assemblyscript": "^0.27.5",
    "massa-proto-as": "github:massalabs/massa-proto-as#feature/Improve_ABI_types_in_wasmv1",
    "prettier": "^2.8.8"
  },
  "scripts": {
    "build": "asc assembly/env.ts",
    "test": "node tests",
    "build:test_compare:debug": "asc assembly/test_compare.ts --target debug -o ./build/test_compare.wasm --use abort=assembly/env/myabort",
    "inspect:test_compare": "wasmer inspect ./build/test_compare.wasm",
    "export:test_compare": "wasmv1_transform ./build/test_compare.wasm add",
    "all:test_compare": "npm run build:test_compare:debug && npm run inspect:test_compare && npm run export:test_compare",
    "build:test_bs58_to_from:debug": "asc assembly/test_bs58_to_from.ts --target debug -o ./build/test_bs58_to_from.wasm --use abort=assembly/env/myabort",
    "inspect:test_bs58_to_from": "wasmer inspect ./build/test_bs58_to_from.wasm",
    "export:test_bs58_to_from": "wasmv1_transform ./build/test_bs58_to_from.wasm add",
    "all:test_bs58_to_from": "npm run build:test_bs58_to_from:debug && npm run inspect:test_bs58_to_from && npm run export:test_bs58_to_from",
    "build:test_structs_check_and_version:debug": "asc assembly/test_structs_check_and_version.ts --target debug -o ./build/test_structs_check_and_version.wasm --use abort=assembly/env/myabort",
    "inspect:test_structs_check_and_version": "wasmer inspect ./build/test_structs_check_and_version.wasm",
    "export:test_structs_check_and_version": "wasmv1_transform ./build/test_structs_check_and_version.wasm add",
    "all:test_structs_check_and_version": "npm run build:test_structs_check_and_version:debug && npm run inspect:test_structs_check_and_version && npm run export:test_structs_check_and_version",
    "build:test_native_time_arithmetic:debug": "asc assembly/test_native_time_arithmetic.ts --target debug -o ./build/test_native_time_arithmetic.wasm --use abort=assembly/env/myabort",
    "inspect:test_native_time_arithmetic": "wasmer inspect ./build/test_native_time_arithmetic.wasm",
    "export:test_native_time_arithmetic": "wasmv1_transform ./build/test_native_time_arithmetic.wasm add",
    "all:test_native_time_arithmetic": "npm run build:test_native_time_arithmetic:debug && npm run inspect:test_native_time_arithmetic && npm run export:test_native_time_arithmetic",
    "build:test_native_amount_arithmetic:debug": "asc assembly/test_native_amount_arithmetic.ts --target debug -o ./build/test_native_amount_arithmetic.wasm --use abort=assembly/env/myabort",
    "inspect:test_native_amount_arithmetic": "wasmer inspect ./build/test_native_amount_arithmetic.wasm",
    "export:test_native_amount_arithmetic": "wasmv1_transform ./build/test_native_amount_arithmetic.wasm add",
    "all:test_native_amount_arithmetic": "npm run build:test_native_amount_arithmetic:debug && npm run inspect:test_native_amount_arithmetic && npm run export:test_native_amount_arithmetic",
    "build:test_generate_event:debug": "asc assembly/test_generate_event.ts --target debug -o ./build/test_generate_event.wasm --use abort=assembly/env/myabort",
    "inspect:test_generate_event": "wasmer inspect ./build/test_generate_event.wasm",
    "export:test_generate_event": "wasmv1_transform ./build/test_generate_event.wasm add",
    "all:test_generate_event": "npm run build:test_generate_event:debug && npm run inspect:test_generate_event && npm run export:test_generate_event",
    "build:test_transfer_coins:debug": "asc assembly/test_transfer_coins.ts --target debug -o ./build/test_transfer_coins.wasm --use abort=assembly/env/myabort",
    "inspect:test_transfer_coins": "wasmer inspect ./build/test_transfer_coins.wasm",
    "export:test_transfer_coins": "wasmv1_transform ./build/test_transfer_coins.wasm add",
    "all:test_transfer_coins": "npm run build:test_transfer_coins:debug && npm run inspect:test_transfer_coins && npm run export:test_transfer_coins",
    "build:test_period_thread:debug": "asc assembly/test_period_thread.ts --target debug -o ./build/test_period_thread.wasm --use abort=assembly/env/myabort",
    "inspect:test_period_thread": "wasmer inspect ./build/test_period_thread.wasm",
    "export:test_period_thread": "wasmv1_transform ./build/test_period_thread.wasm add",
    "all:test_period_thread": "npm run build:test_period_thread:debug && npm run inspect:test_period_thread && npm run export:test_period_thread",
    "build:test_abort:debug": "asc assembly/test_abort.ts --target debug -o ./build/test_abort.wasm --use abort=assembly/env/myabort",
    "inspect:test_abort": "wasmer inspect ./build/test_abort.wasm",
    "export:test_abort": "wasmv1_transform ./build/test_abort.wasm add",
    "all:test_abort": "npm run build:test_abort:debug && npm run inspect:test_abort && npm run export:test_abort",
    "build:test_datastore:debug": "asc assembly/test_datastore.ts --target debug -o ./build/test_datastore.wasm --use abort=assembly/env/myabort",
    "inspect:test_datastore": "wasmer inspect ./build/test_datastore.wasm",
    "export:test_datastore": "wasmv1_transform ./build/test_datastore.wasm add",
    "all:test_datastore": "npm run build:test_datastore:debug && npm run inspect:test_datastore && npm run export:test_datastore",
    "build:test_hash:debug": "asc assembly/test_hash.ts --target debug -o ./build/test_hash.wasm --use abort=assembly/env/myabort",
    "inspect:test_hash": "wasmer inspect ./build/test_hash.wasm",
    "export:test_hash": "wasmv1_transform ./build/test_hash.wasm add",
    "all:test_hash": "npm run build:test_hash:debug && npm run inspect:test_hash && npm run export:test_hash",
    "build:test_ledger_op_keys:debug": "asc assembly/test_ledger_op_keys.ts --target debug -o ./build/test_ledger_op_keys.wasm --use abort=assembly/env/myabort",
    "inspect:test_ledger_op_keys": "wasmer inspect ./build/test_ledger_op_keys.wasm",
    "export:test_ledger_op_keys": "wasmv1_transform ./build/test_ledger_op_keys.wasm add",
    "all:test_ledger_op_keys": "npm run build:test_ledger_op_keys:debug && npm run inspect:test_ledger_op_keys && npm run export:test_ledger_op_keys",
    "build:test_exhaustive_smart_contract:debug": "asc assembly/test_exhaustive_smart_contract.ts --target debug -o ./build/test_exhaustive_smart_contract.wasm --use abort=assembly/env/myabort",
    "inspect:test_exhaustive_smart_contract": "wasmer inspect ./build/test_exhaustive_smart_contract.wasm",
    "export:test_exhaustive_smart_contract": "wasmv1_transform ./build/test_exhaustive_smart_contract.wasm add",
    "all:test_exhaustive_smart_contract": "npm run build:test_exhaustive_smart_contract:debug && npm run inspect:test_exhaustive_smart_contract && npm run export:test_exhaustive_smart_contract",
    "build:binary:debug": "asc assembly/index.ts --target debug --debug --use abort=assembly/env/myabort",
    "build:binary:release": "asc assembly/index.ts --target release --use abort=assembly/env/myabort",
    "build:binaries": "npm run build:binary:debug && npm run build:binary:release",
    "build:debug:main": "asc --transform @massalabs/as-transformer assembly/main.ts --target debug -o ./build/dmain.wasm --use abort=assembly/env/myabort",
    "build:release:main": "asc --transform @massalabs/as-transformer assembly/main.ts --target release -o ./build/rmain.wasm --use abort=assembly/env/myabort",
    "build:deployers": "npm run build:debug:main && npm run build:release:main",
    "inspect:release": "wasmer inspect ./build/release.wasm",
    "inspect:main": "wasmer inspect ./build/main.wasm",
    "export:debug": "wasmv1_transform ./build/debug.wasm add",
    "export:release": "wasmv1_transform ./build/release.wasm add",
    "export:binaries": "npm run export:debug && npm run export:release",
    "export:dmain": "wasmv1_transform ./build/dmain.wasm add",
    "export:rmain": "wasmv1_transform ./build/rmain.wasm add",
    "export:deployers": "npm run export:dmain && npm run export:rmain",
    "all": "npm run build:binaries && npm run export:binaries && npm run build:deployers && npm run export:deployers && npm run inspect:release",
    "start": "npx serve .",
    "all_test": "for t in $(rg \"all:test\" | cut -d':' -f2,3 | tr -d '\"'); do npm run $t; if [ $? -ne 0 ]; then     break;   fi; done"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  }
}
